import os
import re
import time
import random
from flask import Flask, request, jsonify
from flask_cors import CORS
# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ requests, BeautifulSoup –∏ urlparse –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã,
# –Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –∏–º–∏—Ç–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö.
from bs4 import BeautifulSoup 
import requests 
from urllib.parse import urlparse

# ==============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ê FLASK
# ==============================================================================

app = Flask(__name__)
# –í–∫–ª—é—á–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤, —á—Ç–æ–±—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –º–æ–≥ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ API
CORS(app)

# ==============================================================================
# –ö–û–ù–°–¢–ê–ù–¢–´
# ==============================================================================

# –¢–∞–π–º–∞—É—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏)
SCRAPE_TIMEOUT = 5 
# –ù–∞–º –Ω—É–∂–Ω–æ 20 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (4 —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ 5)
REQUIRED_RESULTS = 20 
BASE_HEADERS = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
}

# ==============================================================================
# –£–¢–ò–õ–ò–¢–´ –ò–ú–ò–¢–ê–¶–ò–ò –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø
# ==============================================================================

def generate_mock_results(query: str) -> list[dict]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç REQUIRED_RESULTS (20) —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö 
    –º–æ–∫-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
    
    –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è: title, snippet, uri, source, price, rank.
    """
    results = []
    
    # –ë–∞–∑–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    base_title = query.title()
    sources = ["MusicMagazin.ru", "ProAudioShop.ru", "DJ-Equipment.com", "StudioGear.net", "A&T Trade"]
    domains = ["musicmagazin.ru", "proaudiotrade.com", "djequip.biz", "studiogear.tech", "attrade.ru"]
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∏ —Ä–∞–Ω–≥–∏.
    prices = sorted([random.randint(15000, 45000) for _ in range(REQUIRED_RESULTS)])
    
    for i in range(REQUIRED_RESULTS):
        source_name = random.choice(sources)
        source_domain = domains[sources.index(source_name)]
        
        # –≠–º—É–ª—è—Ü–∏—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π —Ç–æ–≤–∞—Ä–∞
        suffix = random.choice([" (–ß–µ—Ä–Ω—ã–π)", " (–°–µ—Ä—ã–π)", " Pro", " Lite", " II", ""])
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∫-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result = {
            "title": f"{base_title}{suffix} - –ö—É–ø–∏—Ç—å –≤ {source_name}",
            "snippet": f"–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∞—É–¥–∏–æ–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç—É–¥–∏–∏. –ú–æ–¥–µ–ª—å {base_title} —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π –∏ –¥–æ—Å—Ç–∞–≤–∫–æ–π –ø–æ –†–§ –∏ –°–ù–ì.",
            "uri": f"https://www.{source_domain}/products/{query.lower().replace(' ', '-')}-{i+1}",
            "source": source_name,
            "price": prices[i], # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ
            "rank": i + 1, # –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–∞–Ω–≥, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ "–õ—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
        }
        results.append(result)

    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–∞–≤–∏–º —Å–∞–º—ã–π –Ω–∏–∑–∫–∏–π —Ä–∞–Ω–≥ (1) –¥–ª—è —Å–∞–º–æ–≥–æ –¥–µ—à–µ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    # (–∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–µ—Ä–≤—ã–º –ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ), –∏–º–∏—Ç–∏—Ä—É—è –ª—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.
    # –¢–∞–∫ –∫–∞–∫ –º—ã –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–µ–Ω—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏, —Å–∞–º—ã–π –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    # –≤ —Å–ø–∏—Å–∫–µ results –±—É–¥–µ—Ç —Å–∞–º—ã–º –¥–µ—à–µ–≤—ã–º.
    if results:
        results[0]['rank'] = 1 
        results[0]['title'] = f"üí• –õ–£–ß–®–ê–Ø –¶–ï–ù–ê! {results[0]['title']}"

    print(f"[{time.strftime('%H:%M:%S')}] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(results)} –º–æ–∫-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query}'.")
    
    return results

# ==============================================================================
# –≠–¢–ê–ü 1: –ü–û–õ–£–ß–ï–ù–ò–ï –°–°–´–õ–û–ö (–ò–ú–ò–¢–ê–¶–ò–Ø –í–ù–ï–®–ù–ï–ì–û –ü–û–ò–°–ö–ê)
# ==============================================================================

def get_search_links(base_query: str, count: int) -> list[str]:
    """
    –ò–º–∏—Ç–∏—Ä—É–µ—Ç –≤—ã–∑–æ–≤ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Yandex –∏–ª–∏ Google) 
    –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ URL –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞.
    """
    # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ API
    time.sleep(random.uniform(0.5, 1.5)) 
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º mock-URL, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç "—Å–∫—Ä–∞–ø–∏—Ç—å—Å—è" –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —ç—Ç–∞–ø–µ.
    # –ú—ã –∑–Ω–∞–µ–º, —á—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø –∏—Å–ø–æ–ª—å–∑—É–µ—Ç generate_mock_results, 
    # –ø–æ—ç—Ç–æ–º—É —Ä–µ–∞–ª—å–Ω—ã–π —Å–∫—Ä–∞–ø–∏–Ω–≥ –∑–¥–µ—Å—å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
    mock_links = [f"http://mock-link-for-scrape.com/item/{i}" for i in range(count)]
    print(f"[{time.strftime('%H:%M:%S')}] –≠—Ç–∞–ø 1: –ü–æ–ª—É—á–µ–Ω–æ {len(mock_links)} –º–æ–∫-—Å—Å—ã–ª–æ–∫.")
    
    return mock_links

# ==============================================================================
# –≠–¢–ê–ü 2: –î–ï–¢–ê–õ–¨–ù–´–ô –°–ö–†–ê–ü–ò–ù–ì (–ò–ú–ò–¢–ê–¶–ò–Ø)
# ==============================================================================

def scrape_single_link(url: str, query: str) -> dict | None:
    """
    –ò–º–∏—Ç–∏—Ä—É–µ—Ç –≥–ª—É–±–æ–∫–∏–π —Å–∫—Ä–∞–ø–∏–Ω–≥ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è 
    –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ.
    
    –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã requests.get(url) –∏ BS4 –ø–∞—Ä—Å–∏–Ω–≥.
    """
    print(f"[{time.strftime('%H:%M:%S')}] –ò–º–∏—Ç–∞—Ü–∏—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞: {url}")
    
    # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ (–∏–º–∏—Ç–∞—Ü–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è)
    time.sleep(random.uniform(0.1, 0.5)) 

    # –ü–æ—Å–∫–æ–ª—å–∫—É –º—ã –Ω–µ –º–æ–∂–µ–º —Ä–µ–∞–ª—å–Ω–æ —Å–∫—Ä–∞–ø–∏—Ç—å URL, –º—ã –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 
    # —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–∫-—Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏—é —Å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º.
    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –º—ã –±–µ—Ä–µ–º –æ–¥–∏–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ 20 —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö.
    mock_data = generate_mock_results(query)
    
    # –ß—Ç–æ–±—ã –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∫—Ä–∞–ø–∏–Ω–≥–∏ –º–æ–≥—É—Ç –ø–æ—Ç–µ—Ä–ø–µ—Ç—å –Ω–µ—É–¥–∞—á—É,
    if random.random() < 0.1: # 10% —à–∞–Ω—Å –Ω–µ—É–¥–∞—á–∏
        print(f"[{time.strftime('%H:%M:%S')}] –û–®–ò–ë–ö–ê: –°–∫—Ä–∞–ø–∏–Ω–≥ {url} –∏–º–∏—Ç–∏—Ä–æ–≤–∞–ª —Å–±–æ–π.")
        return None
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–¥–∏–Ω —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö
    return random.choice(mock_data) if mock_data else None


# ==============================================================================
# –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –ê–ü–ò: –î–í–£–•–≠–¢–ê–ü–ù–´–ô –ü–û–ò–°–ö
# ==============================================================================

def two_stage_search(query: str) -> tuple[list[dict], int]:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å:
    1. –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ (–∏–º–∏—Ç–∞—Ü–∏—è).
    2. –°–∫—Ä–∞–ø–∏—Ç –∫–∞–∂–¥—É—é —Å—Å—ã–ª–∫—É, –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏—Ç REQUIRED_RESULTS (–∏–º–∏—Ç–∞—Ü–∏—è).
    """
    print(f"[{time.strftime('%H:%M:%S')}] –ù–∞—á–∞—Ç –¥–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")
    
    # 1. –≠—Ç–∞–ø 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫
    # –î–ª—è —Ü–µ–ª–µ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –º—ã –Ω–µ –±—É–¥–µ–º –≤—ã–∑—ã–≤–∞—Ç—å get_search_links, 
    # –∞ —Å—Ä–∞–∑—É —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ 20 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    # –∏ –≤–µ—Ä–Ω–µ–º –∏—Ö –∫–∞–∫ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∏–º–∏—Ç–∏—Ä—É—è, —á—Ç–æ –≤—Å–µ —Å—Å—ã–ª–∫–∏
    # —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –Ω–∞ –≠—Ç–∞–ø–µ 2.
    
    try:
        # –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è 20 —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å–ª–µ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
        # (–≤–∫–ª—é—á–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ)
        final_results = generate_mock_results(query)
        
        if len(final_results) >= REQUIRED_RESULTS:
            print(f"[{time.strftime('%H:%M:%S')}] –£–°–ü–ï–•: –ù–∞–π–¥–µ–Ω–æ {len(final_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (—Ü–µ–ª—å {REQUIRED_RESULTS}).")
            return final_results, 200
        else:
            print(f"[{time.strftime('%H:%M:%S')}] –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(final_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
            return final_results, 200 # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ, —á—Ç–æ –µ—Å—Ç—å, —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 200
            
    except Exception as e:
        print(f"[{time.strftime('%H:%M:%S')}] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ two_stage_search: {e}")
        return jsonify({"error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ API –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}"}), 500
        
    # –≠—Ç–æ—Ç –∫–æ–¥ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, –Ω–æ –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    return jsonify({"error": f"–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å–ª–µ –¥–≤—É—Ö—ç—Ç–∞–ø–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}"}), 404
            
    # return final_results, 200 # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200

# ==============================================================================
# FLASK ROUTE
# ==============================================================================

@app.route('/api/search', methods=['POST'])
def search_endpoint():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ –¥–ª—è –ø—Ä–∏–µ–º–∞ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.
    –û–∂–∏–¥–∞–µ—Ç JSON-—Ç–µ–ª–æ —Å –ø–æ–ª–µ–º 'queries' (–º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫), –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥.
    """
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ 'queries'
    if not request.json or 'queries' not in request.json or not isinstance(request.json['queries'], list):
        print(f"[{time.strftime('%H:%M:%S')}] –û–®–ò–ë–ö–ê 400: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ª—É—á–µ–Ω–æ: {request.json}")
        return jsonify({"error": "–¢—Ä–µ–±—É–µ—Ç—Å—è JSON-—Ç–µ–ª–æ —Å –ø–æ–ª–µ–º 'queries' (–º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫)."}), 400

    queries = request.json['queries']
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ –º–∞—Å—Å–∏–≤–∞ (–Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –∏–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π) 
    # –¥–ª—è –ª–æ–≥–∏–∫–∏ –¥–≤—É—Ö—ç—Ç–∞–ø–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.
    main_query = queries[0] if queries else "generic audio equipment" 

    print(f"[{time.strftime('%H:%M:%S')}] –ü—Ä–∏–Ω—è—Ç –∑–∞–ø—Ä–æ—Å. –û—Å–Ω–æ–≤–Ω–æ–π query: '{main_query}', –≤–µ—Å—å –º–∞—Å—Å–∏–≤: {queries}")

    # 1. –í—ã–ø–æ–ª–Ω—è–µ–º –ª–æ–≥–∏–∫—É –¥–≤—É—Ö—ç—Ç–∞–ø–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    results, status_code = two_stage_search(main_query)
    
    # 2. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return jsonify(results), status_code

# –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ (health check)
@app.route('/', methods=['GET'])
def health_check():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞.
    """
    return jsonify({
        "status": "ok", 
        "service": "psp-search-backend (Mock Two-Stage Search)",
        "timestamp": time.strftime('%Y-%m-%d %H:%M:%S')
    }), 200

# ==============================================================================
# –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê FLASK
# ==============================================================================

if __name__ == '__main__':
    # –û—á–∏—â–∞–µ–º –ª–æ–≥–∏–∫—É –¥–≤—É—Ö—ç—Ç–∞–ø–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º (–ø—Ä–æ—Å—Ç–æ –ø–µ—á–∞—Ç—å)
    print("==================================================================")
    print(f"  PSP Mock Search API –∑–∞–ø—É—â–µ–Ω (Flask)  ")
    print(f"  –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {REQUIRED_RESULTS}")
    print("  –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ /api/search —Å —Ç–µ–ª–æ–º: ")
    print("  {'queries': ['Shure SM58', '–®—É—Ä –°–ú58']")
    print("==================================================================")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º 0.0.0.0 –∏ –ø–æ—Ä—Ç 5000 –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å docker/—Ö–æ—Å—Ç–∏–Ω–≥–æ–º
    app.run(debug=True, host='0.0.0.0', port=5000)
